generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  email       String       @unique
  name        String       @db.VarChar(255)
  devices     Device[]
  indications Indication[]
}

model Device {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  deviceTypeId Int
  name         String     @db.VarChar(255)
  userId       Int
  deviceType   DeviceType @relation(fields: [deviceTypeId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  data         Datum[]
}

model DeviceType {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  abbreviation String?      @db.VarChar(10)
  description  String?
  name         String       @db.VarChar(255)
  parentId     Int?
  parent       DeviceType?  @relation(fields: [parentId], references: [id])
  children     DeviceType[] @relation("DeviceTypeToDeviceType")
  dataTypes    DataType[]
  devices      Device[]
}

model DataType {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  abbreviation      String?            @db.VarChar(10)
  description       String?
  name              String             @db.VarChar(255)
  parentId          Int?
  parent            DataType?          @relation(fields: [parentId], references: [id])
  children          DataType[]         @relation("DataTypeToDataType")
  data              Datum[]
  deviceTypes       DeviceType[]
  measureComponents MeasureComponent[]
  relatedStudies    Study[]
}

model Datum {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  startedAt  DateTime
  dataTypeId Int
  deviceId   Int
  duration   BigInt   @default(0)

  dataType DataType   @relation(fields: [dataTypeId], references: [id])
  device   Device     @relation(fields: [deviceId], references: [id])
  state    StateType?
  value    Float?

  @@unique([startedAt, deviceId, dataTypeId], name: "time_device_data_key")
}

/// "A meaningful aspect of health (MAH) broadly defines an aspect of a disease that patients
/// a) do not want to become worse, b) want to improve or c) want to prevent."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model AspectOfHealth {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  description        String?
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  indications        Indication[]
  relatedStudies     Study[]
}

/// "The COI is a simplified or narrowed element of a MAH that can be practically measured."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model ConceptOfInterest {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  abbreviation    String?          @db.VarChar(10)
  description     String?
  name            String           @db.VarChar(255)
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
  relatedStudies  Study[]
}

/// "The outcome to be measured.""
/// https://docs.google.com/presentation/d/1EmtQ1YS8FAOXbTVDnWPRpwrSXT1MMiTWWnRg4CCRWdc/edit#slide=id.p61
model Measure {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  chartType          ChartType?
  description        String?
  meta               Json?
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  components         MeasureComponent[]
  indications        Indication[]
  validationStudies  Study[]
  aggregation        AggregationType? /// cubejs
  status             MeasureStatus?      @default(value: DRAFT)
  sql                String? /// cubejs
}

model MeasureComponent {
  id          Int       @id @default(autoincrement())
  dataTypeId  Int
  measureId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?
  dataType    DataType  @relation(fields: [dataTypeId], references: [id])
  measure     Measure   @relation(fields: [measureId], references: [id])
  filters     Filter[]

  @@unique([measureId, dataTypeId], name: "measure_data_type_key")
}

model Filter {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  description       String?
  dimension         String
  join              String?
  operator          String
  numberValues      Float[]
  stringValues      String[]
  measureComponents MeasureComponent[]
}

model Study {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  abstract           String?
  authors            String
  externalUrl        String
  title              String
  aspectsOfHealth    AspectOfHealth[]
  conceptsOfInterest ConceptOfInterest[]
  dataTypes          DataType[]
  measures           Measure[]
}

model Indication {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  abbreviation    String?          @db.VarChar(10)
  description     String?
  name            String           @db.VarChar(255)
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
  users           User[]
}

// start: dynamic web components

model Component {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  deleteId  Int?
  readId    Int?
  readOneId Int?
  props     Json?
  upsertId  Int?
  delete    DataQuery?    @relation("deleteMutation", fields: [deleteId], references: [id])
  read      DataQuery?    @relation("readQuery", fields: [readId], references: [id])
  readOne   DataQuery?    @relation("readOneQuery", fields: [readOneId], references: [id])
  type      ComponentType
  upsert    DataQuery?    @relation("upsertMutation", fields: [upsertId], references: [id])
  pages     Page[]
}

model DataQuery {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  document          QueryDocumentType
  parameters        Json
  deleteComponents  Component[]       @relation("deleteMutation")
  readComponents    Component[]       @relation("readQuery")
  readOneComponents Component[]       @relation("readOneQuery")
  upsertComponents  Component[]       @relation("upsertMutation")
}

model Page {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  name       String      @db.VarChar(255)
  title      String
  url        String      @db.VarChar(255)
  components Component[]
  templates  Template[]
}

model Template {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @db.VarChar(255)
  pages     Page[]
}

model DashboardGraph {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @db.VarChar(255)
  layout    Json
  vizState  Json
}

// end: dynamic web components

// start: ePRO

// end: ePRO

enum AggregationType {
  AVG
  COUNT
  COUNT_DISTINCT
  COUNT_DISTINCT_APPROX
  MAX
  MIN
  NUMBER
  RUNNING_TOTAL
  VALUE
  SUM
}

enum ChartType {
  AREA
  BAR
  LINE
  PIE
  TABLE
}

enum ComponentType {
  CONTENT
  DATAGRID
  TABLE
}

enum MeasureStatus {
  VALIDATED
  EXPLORATORY
  DRAFT
}

enum QueryDocumentType {
  GetAspectOfHealthDocument
  GetAspectsOfHealthDocument
  UpsertAspectOfHealthDocument
  DeleteAspectOfHealthDocument
  GetConceptOfInterestDocument
  GetConceptsOfInterestDocument
  UpsertConceptOfInterestDocument
  DeleteConceptOfInterestDocument
  GetDataTypeDocument
  GetDataTypesDocument
  GetMeasureDocument
  GetMeasuresDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
  GetIndicationDocument
  GetIndicationsDocument
  UpsertIndicationDocument
  DeleteIndicationDocument
}

enum StateType {
  SLEEP
  ASLEEP
  AWAKE
  IN_BED
  WALKING
  MEDITATION
  SPINNING
  STRENGTH_TRAINING
  HIKING
}
