generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email       String       @unique
  name        String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  id          Int          @id @default(autoincrement())
  devices     Device[]
  indications Indication[]
}

model Device {
  name         String     @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  deviceTypeId Int
  deviceType   DeviceType @relation(fields: [deviceTypeId], references: [id])
  data         Datum[]
}

model DeviceType {
  name        String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  id          Int          @id @default(autoincrement())
  description String?
  parentId    Int?
  parent      DeviceType?  @relation(fields: [parentId], references: [id])
  devices     Device[]
  DeviceType  DeviceType[] @relation("DeviceTypeToDeviceType")
}

model DataType {
  abbreviation String?             @db.VarChar(10)
  name         String              @db.VarChar(255)
  description  String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime?           @updatedAt
  id           Int                 @id @default(autoincrement())
  parentId     Int?
  parent       DataType?           @relation(fields: [parentId], references: [id])
  children     DataType[]          @relation("DataTypeToDataType")
  data         Datum[]
  measureMap   MeasureToDataType[]
}

model MeasureToDataType {
  dataTypeId  Int
  measureId   Int
  dataType    DataType  @relation(fields: [dataTypeId], references: [id])
  measure     Measure   @relation(fields: [measureId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?

  @@unique([measureId, dataTypeId], name: "measure_data_type_key")
}

model Datum {
  value      Float?
  state      StateType?
  createdAt  DateTime   @default(now())
  startedAt  DateTime
  id         Int        @id @default(autoincrement())
  duration   BigInt     @default(0)
  deviceId   Int
  device     Device     @relation(fields: [deviceId], references: [id])
  dataTypeId Int
  dataType   DataType   @relation(fields: [dataTypeId], references: [id])

  @@unique([startedAt, deviceId, dataTypeId], name: "time_device_data_key")
}

/// "A meaningful aspect of health (MAH) broadly defines an aspect of a disease that patients
/// a) do not want to become worse, b) want to improve or c) want to prevent."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model AspectOfHealth {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  description        String?
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  indications        Indication[]
}

/// "The COI is a simplified or narrowed element of a MAH that can be practically measured."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model ConceptOfInterest {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  description     String?
  name            String           @db.VarChar(255)
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
}

/// "The outcome to be measured.""
/// https://docs.google.com/presentation/d/1EmtQ1YS8FAOXbTVDnWPRpwrSXT1MMiTWWnRg4CCRWdc/edit#slide=id.p61
model Measure {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  description        String?
  abbreviation       String?             @db.VarChar(10)
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  indications        Indication[]
  validationStudies  Study[]
  dataTypeMap        MeasureToDataType[]
}

model Study {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  abstract  String?
  authors   String
  title     String
  measures  Measure[]
}

model Indication {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  name            String           @db.VarChar(255)
  abbreviation    String?          @db.VarChar(10)
  description     String?
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
  users           User[]
}

model Template {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @db.VarChar(255)
  pages     Page[]
}

model Page {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  name       String      @db.VarChar(255)
  title      String
  url        String      @db.VarChar(255)
  components Component[]
  templates  Template[]
}

model DataQuery {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  document         QueryDocumentType
  parameters       Json
  readComponents   Component[]       @relation("readQuery")
  deleteComponents Component[]       @relation("deleteMutation")
  upsertComponents Component[]       @relation("upsertMutation")
}

model Component {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  type      ComponentType
  props     Json?
  readId    Int?
  upsertId  Int?
  deleteId  Int?
  delete    DataQuery?    @relation("deleteMutation", fields: [deleteId], references: [id])
  read      DataQuery?    @relation("readQuery", fields: [readId], references: [id])
  upsert    DataQuery?    @relation("upsertMutation", fields: [upsertId], references: [id])
  pages     Page[]
}

enum StateType {
  SLEEP
  ASLEEP
  AWAKE
  IN_BED
  WALKING
  MEDITATION
  SPINNING
  STRENGTH_TRAINING
  HIKING
}

enum ComponentType {
  CONTENT
  DATAGRID
  TABLE
}

enum QueryDocumentType {
  GetMeasureDocument
  GetMeasuresDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
  GetIndicationDocument
  GetIndicationsDocument
  UpsertIndicationDocument
  DeleteIndicationDocument
}
