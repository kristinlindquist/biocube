generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email     String    @unique
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  id        Int       @id @default(autoincrement())
  devices   Device[]
}

model Device {
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model Stream {
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  id        Int       @id @default(autoincrement())
  deviceId  Int
  data      Datum[]
}

model Datum {
  value     Float
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  streamId  Int
  stream    Stream   @relation(fields: [streamId], references: [id])
}

model AspectOfHealth {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  description        String
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  indications        Indication[]
}

model ConceptOfInterest {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  description     String
  name            String           @db.VarChar(255)
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
}

model Measure {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  description        String
  name               String              @db.VarChar(255)
  conceptsOfInterest ConceptOfInterest[]
  indications        Indication[]
  validationStudies  Study[]
}

model Study {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  abstract  String?
  authors   String
  title     String
  measures  Measure[]
}

model Indication {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  name            String           @db.VarChar(255)
  description     String
  aspectsOfHealth AspectOfHealth[]
  measures        Measure[]
}

model Template {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @db.VarChar(255)
  pages     Page[]
}

model Page {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  name       String      @db.VarChar(255)
  title      String
  url        String      @db.VarChar(255)
  components Component[]
  templates  Template[]
}

model DataQuery {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  document         QueryDocumentType
  parameters       Json
  readComponents   Component[]       @relation("readQuery")
  deleteComponents Component[]       @relation("deleteMutation")
  upsertComponents Component[]       @relation("upsertMutation")
}

model Component {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  type      ComponentType
  readId    Int?
  upsertId  Int?
  deleteId  Int?
  delete    DataQuery?    @relation("deleteMutation", fields: [deleteId], references: [id])
  read      DataQuery?    @relation("readQuery", fields: [readId], references: [id])
  upsert    DataQuery?    @relation("upsertMutation", fields: [upsertId], references: [id])
  pages     Page[]
}

enum ComponentType {
  TABLE
}

enum QueryDocumentType {
  GetMeasuresDocument
  GetIndicationsDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
}
