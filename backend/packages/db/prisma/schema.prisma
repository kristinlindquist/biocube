generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  email       String       @unique
  name        String       @db.VarChar(255)
  devices     Device[]
  indications Indication[]
}

model Device {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  data         Datum[]
  deviceTypeId Int
  deviceType   DeviceType @relation(fields: [deviceTypeId], references: [id])
  name         String     @db.VarChar(255)
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
}

model DeviceType {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  abbreviation String?      @db.VarChar(10)
  children     DeviceType[] @relation("DeviceTypeToDeviceType")
  description String?
  devices     Device[]
  measures    Measure[]
  name     String      @db.VarChar(255)
  parentId Int?
  parent   DeviceType? @relation(fields: [parentId], references: [id])
}

model Datum {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  startedAt DateTime
  answerId  Int?
  answer    Answer?  @relation(fields: [answerId], references: [id])
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id])
  duration  BigInt   @default(0)
  measure   Measure  @relation(fields: [measureId], references: [id])
  measureId Int
  meta  Json?
  state StateType?
  value Float?
  text  String?

  @@unique([startedAt, deviceId, measureId], name: "time_device_measure_key")
}

/// "A meaningful aspect of health (MAH) broadly defines an aspect of a disease that patients
/// a) do not want to become worse, b) want to improve or c) want to prevent."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model AspectOfHealth {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  conceptsOfInterest ConceptOfInterest[]

  description String?
  indications Indication[]

  name           String  @db.VarChar(255)
  relatedStudies Study[]
}

/// "The COI is a simplified or narrowed element of a MAH that can be practically measured."
/// https://www.dimesociety.org/developing-and-selecting-digital-clinical-measures-that-matter-to-patients/
model ConceptOfInterest {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  abbreviation    String?          @db.VarChar(10)
  aspectsOfHealth AspectOfHealth[]
  description    String?
  measures       Measure[]
  name           String    @db.VarChar(255)
  relatedStudies Study[]
}

/// "The outcome to be measured.""
/// https://docs.google.com/presentation/d/1EmtQ1YS8FAOXbTVDnWPRpwrSXT1MMiTWWnRg4CCRWdc/edit#slide=id.p61
model Measure {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  components         Measure[]           @relation("MeasureToMeasure")
  conceptsOfInterest ConceptOfInterest[]
  data               Datum[]
  description        String?
  deviceTypes        DeviceType[]
  indications        Indication[]
  name               String              @db.VarChar(255)
  parentId           Int?
  parent             Measure?            @relation(fields: [parentId], references: [id])
  recipeId           Int?
  recipe             MeasureRecipe?      @relation(fields: [recipeId], references: [id])
  reports            ReportRecipe[]
  questions          Question[]
  status             MeasureStatus?      @default(value: DRAFT)
  type               MeasureType?
  validationStudies  Study[]
}

model MeasureRecipe {
  id          Int              @id @default(autoincrement())
  aggregation AggregationType? /// cubejs
  filters     Filter[]
  measureId   Int?
  measure     Measure?
  sql         String? /// cubejs
}

model ReportRecipe {
  id        Int        @id @default(autoincrement())
  chartType ChartType?
  measures  Measure[]
  meta      Json?
}

model Filter {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  description  String?
  dimension    String
  join         String?
  operator     String
  numberValues Float[]
  recipe       MeasureRecipe @relation(fields: [recipeId], references: [id])
  recipeId     Int
  stringValues String[]
}

model Question {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  answers   Answer[]
  measureId Int
  measure   Measure   @relation(fields: [measureId], references: [id])
  name      String    @db.VarChar(255)
}

model Answer {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  data       Datum[]
  questionId Int
  question   Question  @relation(fields: [questionId], references: [id])
  text       String
  value      Float?
}

model Study {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  abbreviation       String?             @db.VarChar(10)
  abstract           String?
  aspectsOfHealth    AspectOfHealth[]
  authors            String
  conceptsOfInterest ConceptOfInterest[]
  externalUrl        String
  measures           Measure[]
  title              String
}

model Indication {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  abbreviation    String?          @db.VarChar(10)
  aspectsOfHealth AspectOfHealth[]
  description     String?
  measures        Measure[]
  name            String           @db.VarChar(255)
  users           User[]
}

// start: dynamic web components

model Component {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  deleteId  Int?
  readId    Int?
  readOneId Int?
  props     Json?
  upsertId  Int?
  delete    DataQuery?    @relation("deleteMutation", fields: [deleteId], references: [id])
  pages     Page[]
  read      DataQuery?    @relation("readQuery", fields: [readId], references: [id])
  readOne   DataQuery?    @relation("readOneQuery", fields: [readOneId], references: [id])
  type      ComponentType
  upsert    DataQuery?    @relation("upsertMutation", fields: [upsertId], references: [id])
}

model DataQuery {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  deleteComponents  Component[]       @relation("deleteMutation")
  document          QueryDocumentType
  parameters        Json
  readComponents    Component[]       @relation("readQuery")
  readOneComponents Component[]       @relation("readOneQuery")
  upsertComponents  Component[]       @relation("upsertMutation")
}

model Page {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  components Component[]
  name       String      @db.VarChar(255)
  templates  Template[]
  title      String
  url        String      @db.VarChar(255)
}

model Template {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  pages     Page[]
  name      String    @db.VarChar(255)
}

model DashboardGraph {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  layout    Json
  name      String    @db.VarChar(255)
  vizState  Json
}

// end: dynamic web components

// start: ePRO

// end: ePRO

enum AggregationType {
  AVG
  COUNT
  COUNT_DISTINCT
  COUNT_DISTINCT_APPROX
  MAX
  MIN
  NUMBER
  RUNNING_TOTAL
  VALUE
  SUM
}

enum ChartType {
  AREA
  BAR
  LINE
  PIE
  TABLE
}

enum ComponentType {
  CONTENT
  DATAGRID
  TABLE
}

enum MeasureStatus {
  VALIDATED
  EXPLORATORY
  DRAFT
}

enum MeasureType {
  BIOMARKER
  SURROGATE
  PRO
  CLINRO
  OBSRO
  PERFO
}

enum QueryDocumentType {
  GetAspectOfHealthDocument
  GetAspectsOfHealthDocument
  UpsertAspectOfHealthDocument
  DeleteAspectOfHealthDocument
  GetConceptOfInterestDocument
  GetConceptsOfInterestDocument
  UpsertConceptOfInterestDocument
  DeleteConceptOfInterestDocument
  GetDataTypeDocument
  GetDataTypesDocument
  GetMeasureDocument
  GetMeasuresDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
  GetIndicationDocument
  GetIndicationsDocument
  UpsertIndicationDocument
  DeleteIndicationDocument
}

enum StateType {
  IN_VEHICLE
  BIKING
  STILL
  UNKNOWN
  TILTING
  WALKING
  RUNNING
  AEROBICS
  BADMINTON
  BASEBALL
  BASKETBALL
  BIATHLON
  HANDBIKING
  MOUNTAIN_BIKING
  ROAD_BIKING
  SPINNING
  STATIONARY_BIKING
  UTILITY_BIKING
  BOXING
  CALISTHENICS
  CIRCUIT_TRAINING
  CRICKET
  DANCING
  ELLIPTICAL
  FENCING
  AMERICAN_FOOTBALL
  AUSTRALIAN_FOOTBALL
  SOCCER
  FRISBEE
  GARDENING
  GOLF
  GYMNASTICS
  HANDBALL
  HIKING
  HOCKEY
  HORSEBACK_RIDING
  HOUSEWORK
  JUMPING_ROPE
  KAYAKING
  KETTLEBELL_TRAINING
  KICKBOXING
  KITESURFING
  MARTIAL_ARTS
  MEDITATION
  MIXED_MARTIAL_ARTS
  P90X_EXERCISES
  PARAGLIDING
  PILATES
  POLO
  RACQUETBALL
  ROCK_CLIMBING
  ROWING
  ROWING_MACHINE
  RUGBY
  JOGGING
  SAND_RUNNING
  TREADMILL_RUNNING
  SAILING
  SCUBA_DIVING
  SKATEBOARDING
  SKATING
  CROSS_SKATING
  INLINE_SKATING
  SKIING
  BACKCOUNTRY_SKIING
  CROSSCOUNTRY_SKIING
  DOWNHILL_SKIING
  KITE_SKIING
  ROLLER_SKIING
  SLEDDING
  SNOWBOARDING
  SNOWMOBILE
  SNOWSHOEING
  SQUASH
  STAIR_CLIMBING
  STAIR_CLIMBING_MACHINE
  STAND_UP_PADDLEBOARDING
  STRENGTH_TRAINING
  SURFING
  SWIMMING
  POOL_SWIMMING
  OPEN_WATER_SWIMMING
  TABLE_TENNIS
  TEAM_SPORTS
  TENNIS
  TREADMILL
  VOLLEYBALL
  BEACH_VOLLEYBALL
  INDOOR_VOLLEYBALL
  WAKEBOARDING
  FITNESS_WALKING
  NORDING_WALKING
  TREADMILL_WALKING
  WATERPOLO
  WEIGHTLIFTING
  WHEELCHAIR
  WINDSURFING
  YOGA
  ZUMBA
  DIVING
  ERGOMETER
  ICE_SKATING
  INDOOR_SKATING
  CURLING
  OTHER
  CROSSFIT
  HIIT
  INTERVAL_TRAINING
  STROLLER_WALKING
  ELEVATOR
  ESCALATOR
  ARCHERY
  SOFTBALL
  GUIDED_BREATHING
  SLEEP
  ASLEEP
  AWAKE
  IN_BED
}
