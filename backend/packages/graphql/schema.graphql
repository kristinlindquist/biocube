/**
 * NOTE: THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY DIRECTLY.
 */
type Query {
  getActivity(input: GetActivityInput!): GetActivityResult!
  getDaily(input: GetDailyInput!): GetDailyResult!
  getDevice(input: GetDeviceInput!): GetDeviceResult!
  getHeartRate(input: GetHeartRateInput!): GetHeartRateResult!
  getIndication(input: GetIndicationInput!): GetIndicationResult!
  getIndications(input: GetIndicationsInput!): GetIndicationsResult!
  getMeasure(input: GetMeasureInput!): GetMeasureResult!
  getMeasures(input: GetMeasuresInput!): GetMeasuresResult!
  getSleep(input: GetSleepInput!): GetSleepResult!
  getUser(input: GetUserInput!): GetUserResult!
}

input GetDeviceInput {
  id: Int!
}

type GetDeviceResult {
  device: Device
}

type Device {
  id: Int!
  userId: Int!
  name: String!
}

scalar DateTime

input GetHeartRateInput {
  start: DateTime!
  end: DateTime!
}

type GetHeartRateResult {
  heartRate: [HeartRate]
}

input GetSleepInput {
  start: DateTime!
  end: DateTime!
}

type GetSleepResult {
  sleep: [Sleep]
}

input GetDailyInput {
  start: DateTime!
  end: DateTime!
}

type GetDailyResult {
  daily: [Daily]
}

input GetActivityInput {
  start: DateTime!
  end: DateTime!
}

type GetActivityResult {
  activity: [Activity]
}

type HeartRateSummary {
  average: Float
  min: Float
  max: Float
}

type Activity {
  start: Float
  end: Float
  duration: Float
  type: String
}

type Daily {
  date: Float
  heartRate: HeartRateSummary
}

type HeartRate {
  date: Float
  point: Float
}

type OxygenSaturation {
  date: Float
  point: Float
}

type Sleep {
  start: Float
  end: Float
  state: String
}

type Mutation {
  createIndication(input: CreateIndicationInput!): CreateIndicationResult!
  createMeasure(input: CreateMeasureInput!): CreateMeasureResult!
}

input CreateIndicationInput {
  description: String!
  indication: IndicationInput
  name: String!
}

input IndicationInput {
  id: Int!
  name: String!
}

type CreateIndicationResult {
  indication: Indication
}

input GetIndicationsInput {
  test: Boolean
}

type GetIndicationsResult {
  indications: [Indication]
}

input GetIndicationInput {
  id: Int!
}

type GetIndicationResult {
  indication: Indication
}

type Indication {
  conceptsOfInterest: [ConceptOfInterest!]
  description: String!
  id: Int!
  indications: [Indication!]
  name: String!
}

type ConceptOfInterest {
  description: String!
  id: Int!
  name: String!
}

input CreateMeasureInput {
  description: String!
  indications: [IndicationInput]
  name: String!
}

type CreateMeasureResult {
  measure: Measure
}

input GetMeasuresInput {
  test: Boolean
}

type GetMeasuresResult {
  measures: [Measure]
}

input GetMeasureInput {
  id: Int!
}

type GetMeasureResult {
  measure: Measure
}

type Measure {
  id: Int!
  description: String!
  name: String!
  conceptsOfInterest: [ConceptOfInterest!]
  indications: [Indication!]
}

input GetUserInput {
  id: Int!
}

type GetUserResult {
  user: User
}

type User {
  id: Int!
  email: String!
  name: String!
  devices: [Device]
}
