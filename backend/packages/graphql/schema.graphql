/**
 * NOTE: THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY DIRECTLY.
 */
type Activity {
  start: Float
  end: Float
  duration: Float
  state: String
}

enum AggregationType {
  AVG
  COUNT
  COUNT_DISTINCT
  COUNT_DISTINCT_APPROX
  MAX
  MIN
  NUMBER
  RUNNING_TOTAL
  VALUE
  SUM
}

type Answer {
  id: Int
  text: String
  value: Float
}

input AnswerInput {
  id: Int!
  text: String
  value: Float
}

type AspectOfHealth {
  conceptsOfInterest: [ConceptOfInterest!]
  description: String
  id: Int!
  indications: [Indication!]
  name: String!
  url: String
}

input AspectOfHealthInput {
  id: Int!
  description: String
  name: String!
  url: String
}

enum ChartType {
  AREA
  BAR
  LINE
  PIE
  TABLE
}

type Component {
  id: Int!
  props: JSON
  type: ComponentType!
  read: DataQuery
  readOne: DataQuery
  upsert: DataQuery
  delete: DataQuery
}

enum ComponentType {
  CONTENT
  DATAGRID
  TABLE
}

type ConceptOfInterest {
  aspectsOfHealth: [AspectOfHealth!]
  description: String
  id: Int!
  measures: [Measure!]
  name: String!
  url: String
}

input ConceptOfInterestInput {
  description: String
  id: Int!
  name: String!
  url: String
}

type DashboardGraph {
  id: Int!
  name: String!
  layout: JSON!
  vizState: JSON!
}

type DataQuery {
  id: Int!
  document: QueryDocumentType!
  parameters: JSON!
}

scalar DateTime

input DeleteAspectOfHealthInput {
  id: Int!
}

type DeleteAspectOfHealthResult {
  aspectOfHealth: AspectOfHealth!
}

input DeleteConceptOfInterestInput {
  id: Int!
}

type DeleteConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest!
}

input DeleteDashboardGraphInput {
  id: Int!
}

type DeleteDashboardGraphResult {
  dashboardGraph: DashboardGraph!
}

input DeleteIndicationInput {
  id: Int!
}

type DeleteIndicationResult {
  indication: Indication!
}

input DeleteMeasureInput {
  id: Int!
}

type DeleteMeasureResult {
  measure: Measure
}

input DeleteTemplateInput {
  id: Int!
}

type DeleteTemplateResult {
  template: Template
}

type Device {
  id: Int!
  userId: Int!
  name: String!
  url: String
}

type Filter {
  id: Int!
  dimension: String!
  join: String
  operator: String!
  values: [String!]
}

input FilterInput {
  id: Int
  dimension: String!
  join: String
  operator: String!
  values: [String!]
}

input GetAspectOfHealthInput {
  id: Int!
}

type GetAspectOfHealthResult {
  aspectOfHealth: AspectOfHealth
}

input GetAspectsOfHealthInput {
  test: Boolean
}

type GetAspectsOfHealthResult {
  aspectsOfHealth: [AspectOfHealth]
}

input GetConceptOfInterestInput {
  id: Int!
}

type GetConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest
}

input GetConceptsOfInterestInput {
  test: Boolean
}

type GetConceptsOfInterestResult {
  conceptsOfInterest: [ConceptOfInterest]
}

input GetDashboardGraphInput {
  id: Int!
}

type GetDashboardGraphResult {
  dashboardGraph: DashboardGraph
}

input GetDashboardGraphsInput {
  test: Boolean
}

type GetDashboardGraphsResult {
  dashboardGraphs: [DashboardGraph]
}

input GetDeviceInput {
  id: Int!
}

type GetDeviceResult {
  device: Device
}

input GetIndicationInput {
  id: Int!
}

type GetIndicationResult {
  indication: Indication
}

input GetIndicationsInput {
  test: Boolean
}

type GetIndicationsResult {
  indications: [Indication]
}

input GetMeasureInput {
  id: Int!
}

type GetMeasureResult {
  measure: Measure
}

input GetMeasuresInput {
  test: Boolean
}

type GetMeasuresResult {
  measures: [Measure]
}

input GetTemplateInput {
  id: Int!
}

type GetTemplateResult {
  template: Template
}

input GetTemplatesInput {
  test: Boolean
}

type GetTemplatesResult {
  templates: [Template]
}

input GetUserInput {
  id: Int!
}

type GetUserResult {
  user: User
}

type HeartRate {
  date: Float
  point: Float
}

type Indication {
  conceptsOfInterest: [ConceptOfInterest!]
  description: String
  id: Int!
  measures: [Measure!]
  name: String!
  url: String
}

input IndicationInput {
  description: String
  id: Int!
  name: String!
  url: String
}

scalar JSON

type Measure {
  abbreviation: String
  components: [Measure!]
  conceptsOfInterest: [ConceptOfInterest!]
  description: String
  id: Int!
  indications: [Indication!]
  name: String!
  questions: [Question!]
  recipe: MeasureRecipe
  reports: [ReportRecipe!]
  status: String
  url: String
}

input MeasureInput {
  description: String
  id: Int!
  name: String!
  url: String
}

type MeasureRecipe {
  id: Int
  aggregation: String
  description: String
  filters: [Filter!]
  sql: String!
}

input MeasureRecipeInput {
  id: Int
  aggregation: AggregationType
  description: String
  filters: [FilterInput!]
  sql: String!
}

enum MeasureStatus {
  VALIDATED
  EXPLORATORY
  DRAFT
}

type Mutation {
  deleteAspectOfHealth(input: DeleteAspectOfHealthInput!): DeleteAspectOfHealthResult!
  deleteConceptOfInterest(input: DeleteConceptOfInterestInput!): DeleteConceptOfInterestResult!
  deleteDashboardGraph(input: DeleteDashboardGraphInput!): DeleteDashboardGraphResult!
  deleteIndication(input: DeleteIndicationInput!): DeleteIndicationResult!
  deleteMeasure(input: DeleteMeasureInput!): DeleteMeasureResult!
  deleteTemplate(input: DeleteTemplateInput!): DeleteTemplateResult!
  upsertAspectOfHealth(input: UpsertAspectOfHealthInput!): UpsertAspectOfHealthResult!
  upsertConceptOfInterest(input: UpsertConceptOfInterestInput!): UpsertConceptOfInterestResult!
  upsertDashboardGraph(input: UpsertDashboardGraphInput!): UpsertDashboardGraphResult!
  upsertIndication(input: UpsertIndicationInput!): UpsertIndicationResult!
  upsertMeasure(input: UpsertMeasureInput!): UpsertMeasureResult!
  upsertTemplate(input: UpsertTemplateInput!): UpsertTemplateResult!
}

type OxygenSaturation {
  date: Float
  point: Float
}

type Page {
  id: Int!
  name: String!
  title: String!
  url: String!
  components: [Component!]
}

type Query {
  getAspectOfHealth(input: GetAspectOfHealthInput!): GetAspectOfHealthResult!
  getAspectsOfHealth(input: GetAspectsOfHealthInput!): GetAspectsOfHealthResult!
  getConceptOfInterest(input: GetConceptOfInterestInput!): GetConceptOfInterestResult!
  getConceptsOfInterest(input: GetConceptsOfInterestInput!): GetConceptsOfInterestResult!
  getDashboardGraph(input: GetDashboardGraphInput!): GetDashboardGraphResult!
  getDashboardGraphs(input: GetDashboardGraphsInput!): GetDashboardGraphsResult!
  getDevice(input: GetDeviceInput!): GetDeviceResult!
  getIndication(input: GetIndicationInput!): GetIndicationResult!
  getIndications(input: GetIndicationsInput!): GetIndicationsResult!
  getMeasure(input: GetMeasureInput!): GetMeasureResult!
  getMeasures(input: GetMeasuresInput!): GetMeasuresResult!
  getTemplate(input: GetTemplateInput!): GetTemplateResult!
  getTemplates(input: GetTemplatesInput!): GetTemplatesResult!
  getUser(input: GetUserInput!): GetUserResult!
  syncGoogleFit(input: SyncGoogleFitInput!): SyncGoogleFitResult!
}

enum QueryDocumentType {
  GetAspectOfHealthDocument
  GetAspectsOfHealthDocument
  UpsertAspectOfHealthDocument
  DeleteAspectOfHealthDocument
  GetConceptOfInterestDocument
  GetConceptsOfInterestDocument
  UpsertConceptOfInterestDocument
  DeleteConceptOfInterestDocument
  GetDataTypeDocument
  GetDataTypesDocument
  GetMeasureDocument
  GetMeasuresDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
  GetIndicationDocument
  GetIndicationsDocument
  UpsertIndicationDocument
  DeleteIndicationDocument
}

type Question {
  id: Int
  answers: [Answer!]
  description: String
  text: String!
}

input QuestionInput {
  id: Int!
  answers: [AnswerInput!]
  description: String
  text: String
}

type ReportRecipe {
  id: Int
  chartType: String
  meta: JSON
}

input ReportRecipeInput {
  id: Int!
  chartType: ChartType
  meta: JSON
}

type Sleep {
  start: Float
  end: Float
  state: String
}

input SyncGoogleFitInput {
  start: DateTime!
  end: DateTime!
  token: String!
}

type SyncGoogleFitResult {
  result: Boolean
}

type Template {
  id: Int!
  name: String!
  pages: [Page!]
}

input UpsertAspectOfHealthInput {
  id: Int
  conceptsOfInterest: [ConceptOfInterestInput!]
  description: String
  indications: [IndicationInput!]
  name: String!
  url: String
}

type UpsertAspectOfHealthResult {
  aspectOfHealth: AspectOfHealth!
}

input UpsertConceptOfInterestInput {
  id: Int
  aspectsOfHealth: [AspectOfHealthInput!]
  description: String
  measures: [MeasureInput!]
  name: String!
  url: String
}

type UpsertConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest!
}

input UpsertDashboardGraphInput {
  id: Int
  name: String!
  layout: JSON!
  vizState: JSON!
}

type UpsertDashboardGraphResult {
  dashboardGraph: DashboardGraph!
}

input UpsertIndicationInput {
  id: Int
  description: String
  measures: [MeasureInput!]
  name: String!
  url: String
}

type UpsertIndicationResult {
  indication: Indication!
}

input UpsertMeasureInput {
  id: Int
  abbreviation: String
  components: [UpsertMeasureInput!]
  conceptsOfInterest: [ConceptOfInterestInput!]
  description: String
  indications: [IndicationInput!]
  name: String!
  recipe: MeasureRecipeInput
  reports: [ReportRecipeInput!]
  questions: [QuestionInput!]
  status: MeasureStatus
  url: String
}

type UpsertMeasureResult {
  measure: Measure
}

input UpsertTemplateInput {
  id: Int
  description: String!
  name: String!
}

type UpsertTemplateResult {
  template: Template
}

type User {
  id: Int!
  email: String!
  name: String!
  devices: [Device]
}
