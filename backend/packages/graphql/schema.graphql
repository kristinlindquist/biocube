/**
 * NOTE: THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY DIRECTLY.
 */
type Activity {
  start: Float
  end: Float
  duration: Float
  state: String
}

enum AggregationType {
  AVG
  COUNT
  COUNT_DISTINCT
  COUNT_DISTINCT_APPROX
  MAX
  MIN
  NUMBER
  RUNNING_TOTAL
  VALUE
  SUM
}

enum ChartType {
  AREA
  BAR
  LINE
  PIE
  TABLE
}

type Component {
  dataType: DataType!
  delete: DataQuery
  description: String
  filters: [Filter!]
  id: Int!
  props: JSON
  read: DataQuery
  readOne: DataQuery
  type: ComponentType!
  upsert: DataQuery
}

input ComponentInput {
  id: Int!
}

enum ComponentType {
  CONTENT
  DATAGRID
  TABLE
}

type ConceptOfInterest {
  description: String
  id: Int!
  name: String!
  url: String
}

input ConceptOfInterestInput {
  id: Int!
  description: String
  name: String
}

type DashboardGraph {
  id: Int!
  name: String!
  layout: JSON!
  vizState: JSON!
}

type DataQuery {
  id: Int!
  document: QueryDocumentType!
  parameters: JSON!
}

type DataType {
  description: String
  deviceTypes: [DeviceType!]
  id: Int!
  measures: [Measure!]
  name: String!
  url: String
}

input DataTypeInput {
  id: Int!
  description: String
  name: String
  url: String
}

scalar DateTime

input DeleteConceptOfInterestInput {
  id: Int!
}

type DeleteConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest!
}

input DeleteDashboardGraphInput {
  id: Int!
}

type DeleteDashboardGraphResult {
  dashboardGraph: DashboardGraph!
}

input DeleteDataTypeInput {
  id: Int!
}

type DeleteDataTypeResult {
  dataType: DataType
}

input DeleteIndicationInput {
  id: Int!
}

type DeleteIndicationResult {
  indication: Indication!
}

input DeleteMeasureInput {
  id: Int!
}

type DeleteMeasureResult {
  measure: Measure
}

input DeleteTemplateInput {
  id: Int!
}

type DeleteTemplateResult {
  template: Template
}

type Device {
  id: Int!
  userId: Int!
  name: String!
  url: String
}

type DeviceType {
  id: Int!
  description: String
  name: String!
  url: String
}

input DeviceTypeInput {
  id: Int!
  description: String
  name: String
}

type Filter {
  id: Int!
  dimension: String!
  join: String
  operator: String!
  values: [String!]
}

input GetConceptOfInterestInput {
  id: Int!
}

type GetConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest
}

input GetConceptsOfInterestInput {
  test: Boolean
}

type GetConceptsOfInterestResult {
  conceptsOfInterest: [ConceptOfInterest]
}

input GetDashboardGraphInput {
  id: Int!
}

type GetDashboardGraphResult {
  dashboardGraph: DashboardGraph
}

input GetDashboardGraphsInput {
  test: Boolean
}

type GetDashboardGraphsResult {
  dashboardGraphs: [DashboardGraph]
}

input GetDataTypeInput {
  id: Int!
}

type GetDataTypeResult {
  dataType: DataType
}

input GetDataTypesInput {
  test: Boolean
}

type GetDataTypesResult {
  dataTypes: [DataType]
}

input GetDeviceInput {
  id: Int!
}

type GetDeviceResult {
  device: Device
}

input GetIndicationInput {
  id: Int!
}

type GetIndicationResult {
  indication: Indication
}

input GetIndicationsInput {
  test: Boolean
}

type GetIndicationsResult {
  indications: [Indication]
}

input GetMeasureInput {
  id: Int!
}

type GetMeasureResult {
  measure: Measure
}

input GetMeasuresInput {
  test: Boolean
}

type GetMeasuresResult {
  measures: [Measure]
}

input GetTemplateInput {
  id: Int!
}

type GetTemplateResult {
  template: Template
}

input GetTemplatesInput {
  test: Boolean
}

type GetTemplatesResult {
  templates: [Template]
}

input GetUserInput {
  id: Int!
}

type GetUserResult {
  user: User
}

type HeartRate {
  date: Float
  point: Float
}

type Indication {
  conceptsOfInterest: [ConceptOfInterest!]
  description: String
  id: Int!
  measures: [Measure!]
  name: String!
  url: String
}

input IndicationInput {
  id: Int!
  description: String
  name: String
  url: String
}

scalar JSON

type Measure {
  aggregation: String
  chartType: String
  components: [Component!]
  conceptsOfInterest: [ConceptOfInterest!]
  dataTypes: [DataType!]
  description: String
  id: Int!
  indications: [Indication!]
  meta: JSON
  name: String!
  sql: String
  status: String
  url: String
}

input MeasureInput {
  description: String
  id: Int!
  name: String
  url: String
}

enum MeasureStatus {
  VALIDATED
  EXPLORATORY
  DRAFT
}

type Mutation {
  deleteConceptOfInterest(input: DeleteConceptOfInterestInput!): DeleteConceptOfInterestResult!
  deleteDashboardGraph(input: DeleteDashboardGraphInput!): DeleteDashboardGraphResult!
  deleteDataType(input: DeleteDataTypeInput!): DeleteDataTypeResult!
  deleteIndication(input: DeleteIndicationInput!): DeleteIndicationResult!
  deleteMeasure(input: DeleteMeasureInput!): DeleteMeasureResult!
  deleteTemplate(input: DeleteTemplateInput!): DeleteTemplateResult!
  upsertConceptOfInterest(input: UpsertConceptOfInterestInput!): UpsertConceptOfInterestResult!
  upsertDashboardGraph(input: UpsertDashboardGraphInput!): UpsertDashboardGraphResult!
  upsertDataType(input: UpsertDataTypeInput!): UpsertDataTypeResult!
  upsertIndication(input: UpsertIndicationInput!): UpsertIndicationResult!
  upsertMeasure(input: UpsertMeasureInput!): UpsertMeasureResult!
  upsertTemplate(input: UpsertTemplateInput!): UpsertTemplateResult!
}

type OxygenSaturation {
  date: Float
  point: Float
}

type Page {
  id: Int!
  name: String!
  title: String!
  url: String!
  components: [Component!]
}

type Query {
  getConceptOfInterest(input: GetConceptOfInterestInput!): GetConceptOfInterestResult!
  getConceptsOfInterest(input: GetConceptsOfInterestInput!): GetConceptsOfInterestResult!
  getDashboardGraph(input: GetDashboardGraphInput!): GetDashboardGraphResult!
  getDashboardGraphs(input: GetDashboardGraphsInput!): GetDashboardGraphsResult!
  getDataType(input: GetDataTypeInput!): GetDataTypeResult!
  getDataTypes(input: GetDataTypesInput!): GetDataTypesResult!
  getDevice(input: GetDeviceInput!): GetDeviceResult!
  getIndication(input: GetIndicationInput!): GetIndicationResult!
  getIndications(input: GetIndicationsInput!): GetIndicationsResult!
  getMeasure(input: GetMeasureInput!): GetMeasureResult!
  getMeasures(input: GetMeasuresInput!): GetMeasuresResult!
  getTemplate(input: GetTemplateInput!): GetTemplateResult!
  getTemplates(input: GetTemplatesInput!): GetTemplatesResult!
  getUser(input: GetUserInput!): GetUserResult!
  syncGoogleFit(input: SyncGoogleFitInput!): SyncGoogleFitResult!
}

enum QueryDocumentType {
  GetDataTypeDocument
  GetDataTypesDocument
  GetMeasureDocument
  GetMeasuresDocument
  UpsertMeasureDocument
  DeleteMeasureDocument
  GetIndicationDocument
  GetIndicationsDocument
  UpsertIndicationDocument
  DeleteIndicationDocument
}

type Sleep {
  start: Float
  end: Float
  state: String
}

input SyncGoogleFitInput {
  start: DateTime!
  end: DateTime!
  token: String!
}

type SyncGoogleFitResult {
  result: Boolean
}

type Template {
  id: Int!
  name: String!
  pages: [Page!]
}

input UpsertConceptOfInterestInput {
  id: Int
  description: String
  name: String!
  url: String
}

type UpsertConceptOfInterestResult {
  conceptOfInterest: ConceptOfInterest!
}

input UpsertDashboardGraphInput {
  id: Int
  name: String!
  layout: JSON!
  vizState: JSON!
}

type UpsertDashboardGraphResult {
  dashboardGraph: DashboardGraph!
}

input UpsertDataTypeInput {
  id: Int
  description: String
  deviceTypes: [DeviceTypeInput!]
  measures: [MeasureInput!]
  name: String!
  url: String
}

type UpsertDataTypeResult {
  dataType: DataType
}

input UpsertIndicationInput {
  id: Int
  description: String
  measures: [MeasureInput!]
  name: String!
  url: String
}

type UpsertIndicationResult {
  indication: Indication!
}

input UpsertMeasureInput {
  id: Int
  aggregation: AggregationType
  chartType: ChartType
  description: String
  meta: JSON
  name: String!
  conceptsOfInterest: [ConceptOfInterestInput!]
  components: [ComponentInput!]
  dataTypes: [DataTypeInput!]
  indications: [IndicationInput!]
  status: MeasureStatus
  sql: String
  url: String
}

type UpsertMeasureResult {
  measure: Measure
}

input UpsertTemplateInput {
  id: Int
  description: String!
  name: String!
}

type UpsertTemplateResult {
  template: Template
}

type User {
  id: Int!
  email: String!
  name: String!
  devices: [Device]
}
